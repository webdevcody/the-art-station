/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as UnauthorizedRouteImport } from './routes/unauthorized'
import { Route as CartRouteImport } from './routes/cart'
import { Route as BrowseRouteImport } from './routes/browse'
import { Route as AdminRouteRouteImport } from './routes/admin/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AdminIndexRouteImport } from './routes/admin/index'
import { Route as ArtworksArtworkIdRouteImport } from './routes/artworks/$artworkId'
import { Route as AdminArtworksRouteImport } from './routes/admin/artworks'
import { Route as ArtworksArtworkIdEditRouteImport } from './routes/artworks/$artworkId/edit'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth/$'

const rootServerRouteImport = createServerRootRoute()

const UnauthorizedRoute = UnauthorizedRouteImport.update({
  id: '/unauthorized',
  path: '/unauthorized',
  getParentRoute: () => rootRouteImport,
} as any)
const CartRoute = CartRouteImport.update({
  id: '/cart',
  path: '/cart',
  getParentRoute: () => rootRouteImport,
} as any)
const BrowseRoute = BrowseRouteImport.update({
  id: '/browse',
  path: '/browse',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRouteRoute = AdminRouteRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRouteRoute,
} as any)
const ArtworksArtworkIdRoute = ArtworksArtworkIdRouteImport.update({
  id: '/artworks/$artworkId',
  path: '/artworks/$artworkId',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminArtworksRoute = AdminArtworksRouteImport.update({
  id: '/artworks',
  path: '/artworks',
  getParentRoute: () => AdminRouteRoute,
} as any)
const ArtworksArtworkIdEditRoute = ArtworksArtworkIdEditRouteImport.update({
  id: '/edit',
  path: '/edit',
  getParentRoute: () => ArtworksArtworkIdRoute,
} as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteRouteWithChildren
  '/browse': typeof BrowseRoute
  '/cart': typeof CartRoute
  '/unauthorized': typeof UnauthorizedRoute
  '/admin/artworks': typeof AdminArtworksRoute
  '/artworks/$artworkId': typeof ArtworksArtworkIdRouteWithChildren
  '/admin/': typeof AdminIndexRoute
  '/artworks/$artworkId/edit': typeof ArtworksArtworkIdEditRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/browse': typeof BrowseRoute
  '/cart': typeof CartRoute
  '/unauthorized': typeof UnauthorizedRoute
  '/admin/artworks': typeof AdminArtworksRoute
  '/artworks/$artworkId': typeof ArtworksArtworkIdRouteWithChildren
  '/admin': typeof AdminIndexRoute
  '/artworks/$artworkId/edit': typeof ArtworksArtworkIdEditRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteRouteWithChildren
  '/browse': typeof BrowseRoute
  '/cart': typeof CartRoute
  '/unauthorized': typeof UnauthorizedRoute
  '/admin/artworks': typeof AdminArtworksRoute
  '/artworks/$artworkId': typeof ArtworksArtworkIdRouteWithChildren
  '/admin/': typeof AdminIndexRoute
  '/artworks/$artworkId/edit': typeof ArtworksArtworkIdEditRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/browse'
    | '/cart'
    | '/unauthorized'
    | '/admin/artworks'
    | '/artworks/$artworkId'
    | '/admin/'
    | '/artworks/$artworkId/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/browse'
    | '/cart'
    | '/unauthorized'
    | '/admin/artworks'
    | '/artworks/$artworkId'
    | '/admin'
    | '/artworks/$artworkId/edit'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/browse'
    | '/cart'
    | '/unauthorized'
    | '/admin/artworks'
    | '/artworks/$artworkId'
    | '/admin/'
    | '/artworks/$artworkId/edit'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRouteRoute: typeof AdminRouteRouteWithChildren
  BrowseRoute: typeof BrowseRoute
  CartRoute: typeof CartRoute
  UnauthorizedRoute: typeof UnauthorizedRoute
  ArtworksArtworkIdRoute: typeof ArtworksArtworkIdRouteWithChildren
}
export interface FileServerRoutesByFullPath {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/auth/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/auth/$'
  id: '__root__' | '/api/auth/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/unauthorized': {
      id: '/unauthorized'
      path: '/unauthorized'
      fullPath: '/unauthorized'
      preLoaderRoute: typeof UnauthorizedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cart': {
      id: '/cart'
      path: '/cart'
      fullPath: '/cart'
      preLoaderRoute: typeof CartRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/browse': {
      id: '/browse'
      path: '/browse'
      fullPath: '/browse'
      preLoaderRoute: typeof BrowseRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/artworks/$artworkId': {
      id: '/artworks/$artworkId'
      path: '/artworks/$artworkId'
      fullPath: '/artworks/$artworkId'
      preLoaderRoute: typeof ArtworksArtworkIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/artworks': {
      id: '/admin/artworks'
      path: '/artworks'
      fullPath: '/admin/artworks'
      preLoaderRoute: typeof AdminArtworksRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/artworks/$artworkId/edit': {
      id: '/artworks/$artworkId/edit'
      path: '/edit'
      fullPath: '/artworks/$artworkId/edit'
      preLoaderRoute: typeof ArtworksArtworkIdEditRouteImport
      parentRoute: typeof ArtworksArtworkIdRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface AdminRouteRouteChildren {
  AdminArtworksRoute: typeof AdminArtworksRoute
  AdminIndexRoute: typeof AdminIndexRoute
}

const AdminRouteRouteChildren: AdminRouteRouteChildren = {
  AdminArtworksRoute: AdminArtworksRoute,
  AdminIndexRoute: AdminIndexRoute,
}

const AdminRouteRouteWithChildren = AdminRouteRoute._addFileChildren(
  AdminRouteRouteChildren,
)

interface ArtworksArtworkIdRouteChildren {
  ArtworksArtworkIdEditRoute: typeof ArtworksArtworkIdEditRoute
}

const ArtworksArtworkIdRouteChildren: ArtworksArtworkIdRouteChildren = {
  ArtworksArtworkIdEditRoute: ArtworksArtworkIdEditRoute,
}

const ArtworksArtworkIdRouteWithChildren =
  ArtworksArtworkIdRoute._addFileChildren(ArtworksArtworkIdRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRouteRoute: AdminRouteRouteWithChildren,
  BrowseRoute: BrowseRoute,
  CartRoute: CartRoute,
  UnauthorizedRoute: UnauthorizedRoute,
  ArtworksArtworkIdRoute: ArtworksArtworkIdRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
