/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as UnauthorizedRouteImport } from './routes/unauthorized'
import { Route as TermsRouteImport } from './routes/terms'
import { Route as ShippingRouteImport } from './routes/shipping'
import { Route as PrivacyRouteImport } from './routes/privacy'
import { Route as FaqRouteImport } from './routes/faq'
import { Route as ContactRouteImport } from './routes/contact'
import { Route as CartRouteImport } from './routes/cart'
import { Route as BrowseRouteImport } from './routes/browse'
import { Route as AboutRouteImport } from './routes/about'
import { Route as AdminRouteRouteImport } from './routes/admin/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as CheckoutSuccessRouteImport } from './routes/checkout/success'
import { Route as ArtworksArtworkIdIndexRouteImport } from './routes/artworks/$artworkId/index'
import { Route as ArtworksArtworkIdEditRouteImport } from './routes/artworks/$artworkId/edit'
import { ServerRoute as ApiWebhooksStripeServerRouteImport } from './routes/api/webhooks/stripe'
import { ServerRoute as ApiImagesArtworkIdServerRouteImport } from './routes/api/images/$artworkId'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth/$'

const rootServerRouteImport = createServerRootRoute()

const UnauthorizedRoute = UnauthorizedRouteImport.update({
  id: '/unauthorized',
  path: '/unauthorized',
  getParentRoute: () => rootRouteImport,
} as any)
const TermsRoute = TermsRouteImport.update({
  id: '/terms',
  path: '/terms',
  getParentRoute: () => rootRouteImport,
} as any)
const ShippingRoute = ShippingRouteImport.update({
  id: '/shipping',
  path: '/shipping',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivacyRoute = PrivacyRouteImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => rootRouteImport,
} as any)
const FaqRoute = FaqRouteImport.update({
  id: '/faq',
  path: '/faq',
  getParentRoute: () => rootRouteImport,
} as any)
const ContactRoute = ContactRouteImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRouteImport,
} as any)
const CartRoute = CartRouteImport.update({
  id: '/cart',
  path: '/cart',
  getParentRoute: () => rootRouteImport,
} as any)
const BrowseRoute = BrowseRouteImport.update({
  id: '/browse',
  path: '/browse',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRouteRoute = AdminRouteRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const CheckoutSuccessRoute = CheckoutSuccessRouteImport.update({
  id: '/checkout/success',
  path: '/checkout/success',
  getParentRoute: () => rootRouteImport,
} as any)
const ArtworksArtworkIdIndexRoute = ArtworksArtworkIdIndexRouteImport.update({
  id: '/artworks/$artworkId/',
  path: '/artworks/$artworkId/',
  getParentRoute: () => rootRouteImport,
} as any)
const ArtworksArtworkIdEditRoute = ArtworksArtworkIdEditRouteImport.update({
  id: '/artworks/$artworkId/edit',
  path: '/artworks/$artworkId/edit',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiWebhooksStripeServerRoute = ApiWebhooksStripeServerRouteImport.update({
  id: '/api/webhooks/stripe',
  path: '/api/webhooks/stripe',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiImagesArtworkIdServerRoute =
  ApiImagesArtworkIdServerRouteImport.update({
    id: '/api/images/$artworkId',
    path: '/api/images/$artworkId',
    getParentRoute: () => rootServerRouteImport,
  } as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteRoute
  '/about': typeof AboutRoute
  '/browse': typeof BrowseRoute
  '/cart': typeof CartRoute
  '/contact': typeof ContactRoute
  '/faq': typeof FaqRoute
  '/privacy': typeof PrivacyRoute
  '/shipping': typeof ShippingRoute
  '/terms': typeof TermsRoute
  '/unauthorized': typeof UnauthorizedRoute
  '/checkout/success': typeof CheckoutSuccessRoute
  '/artworks/$artworkId/edit': typeof ArtworksArtworkIdEditRoute
  '/artworks/$artworkId': typeof ArtworksArtworkIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteRoute
  '/about': typeof AboutRoute
  '/browse': typeof BrowseRoute
  '/cart': typeof CartRoute
  '/contact': typeof ContactRoute
  '/faq': typeof FaqRoute
  '/privacy': typeof PrivacyRoute
  '/shipping': typeof ShippingRoute
  '/terms': typeof TermsRoute
  '/unauthorized': typeof UnauthorizedRoute
  '/checkout/success': typeof CheckoutSuccessRoute
  '/artworks/$artworkId/edit': typeof ArtworksArtworkIdEditRoute
  '/artworks/$artworkId': typeof ArtworksArtworkIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteRoute
  '/about': typeof AboutRoute
  '/browse': typeof BrowseRoute
  '/cart': typeof CartRoute
  '/contact': typeof ContactRoute
  '/faq': typeof FaqRoute
  '/privacy': typeof PrivacyRoute
  '/shipping': typeof ShippingRoute
  '/terms': typeof TermsRoute
  '/unauthorized': typeof UnauthorizedRoute
  '/checkout/success': typeof CheckoutSuccessRoute
  '/artworks/$artworkId/edit': typeof ArtworksArtworkIdEditRoute
  '/artworks/$artworkId/': typeof ArtworksArtworkIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/about'
    | '/browse'
    | '/cart'
    | '/contact'
    | '/faq'
    | '/privacy'
    | '/shipping'
    | '/terms'
    | '/unauthorized'
    | '/checkout/success'
    | '/artworks/$artworkId/edit'
    | '/artworks/$artworkId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin'
    | '/about'
    | '/browse'
    | '/cart'
    | '/contact'
    | '/faq'
    | '/privacy'
    | '/shipping'
    | '/terms'
    | '/unauthorized'
    | '/checkout/success'
    | '/artworks/$artworkId/edit'
    | '/artworks/$artworkId'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/about'
    | '/browse'
    | '/cart'
    | '/contact'
    | '/faq'
    | '/privacy'
    | '/shipping'
    | '/terms'
    | '/unauthorized'
    | '/checkout/success'
    | '/artworks/$artworkId/edit'
    | '/artworks/$artworkId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRouteRoute: typeof AdminRouteRoute
  AboutRoute: typeof AboutRoute
  BrowseRoute: typeof BrowseRoute
  CartRoute: typeof CartRoute
  ContactRoute: typeof ContactRoute
  FaqRoute: typeof FaqRoute
  PrivacyRoute: typeof PrivacyRoute
  ShippingRoute: typeof ShippingRoute
  TermsRoute: typeof TermsRoute
  UnauthorizedRoute: typeof UnauthorizedRoute
  CheckoutSuccessRoute: typeof CheckoutSuccessRoute
  ArtworksArtworkIdEditRoute: typeof ArtworksArtworkIdEditRoute
  ArtworksArtworkIdIndexRoute: typeof ArtworksArtworkIdIndexRoute
}
export interface FileServerRoutesByFullPath {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/images/$artworkId': typeof ApiImagesArtworkIdServerRoute
  '/api/webhooks/stripe': typeof ApiWebhooksStripeServerRoute
}
export interface FileServerRoutesByTo {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/images/$artworkId': typeof ApiImagesArtworkIdServerRoute
  '/api/webhooks/stripe': typeof ApiWebhooksStripeServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/images/$artworkId': typeof ApiImagesArtworkIdServerRoute
  '/api/webhooks/stripe': typeof ApiWebhooksStripeServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/auth/$' | '/api/images/$artworkId' | '/api/webhooks/stripe'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/auth/$' | '/api/images/$artworkId' | '/api/webhooks/stripe'
  id:
    | '__root__'
    | '/api/auth/$'
    | '/api/images/$artworkId'
    | '/api/webhooks/stripe'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
  ApiImagesArtworkIdServerRoute: typeof ApiImagesArtworkIdServerRoute
  ApiWebhooksStripeServerRoute: typeof ApiWebhooksStripeServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/unauthorized': {
      id: '/unauthorized'
      path: '/unauthorized'
      fullPath: '/unauthorized'
      preLoaderRoute: typeof UnauthorizedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/terms': {
      id: '/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof TermsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/shipping': {
      id: '/shipping'
      path: '/shipping'
      fullPath: '/shipping'
      preLoaderRoute: typeof ShippingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/privacy': {
      id: '/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PrivacyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/faq': {
      id: '/faq'
      path: '/faq'
      fullPath: '/faq'
      preLoaderRoute: typeof FaqRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cart': {
      id: '/cart'
      path: '/cart'
      fullPath: '/cart'
      preLoaderRoute: typeof CartRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/browse': {
      id: '/browse'
      path: '/browse'
      fullPath: '/browse'
      preLoaderRoute: typeof BrowseRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/checkout/success': {
      id: '/checkout/success'
      path: '/checkout/success'
      fullPath: '/checkout/success'
      preLoaderRoute: typeof CheckoutSuccessRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/artworks/$artworkId/': {
      id: '/artworks/$artworkId/'
      path: '/artworks/$artworkId'
      fullPath: '/artworks/$artworkId'
      preLoaderRoute: typeof ArtworksArtworkIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/artworks/$artworkId/edit': {
      id: '/artworks/$artworkId/edit'
      path: '/artworks/$artworkId/edit'
      fullPath: '/artworks/$artworkId/edit'
      preLoaderRoute: typeof ArtworksArtworkIdEditRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/webhooks/stripe': {
      id: '/api/webhooks/stripe'
      path: '/api/webhooks/stripe'
      fullPath: '/api/webhooks/stripe'
      preLoaderRoute: typeof ApiWebhooksStripeServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/images/$artworkId': {
      id: '/api/images/$artworkId'
      path: '/api/images/$artworkId'
      fullPath: '/api/images/$artworkId'
      preLoaderRoute: typeof ApiImagesArtworkIdServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRouteRoute: AdminRouteRoute,
  AboutRoute: AboutRoute,
  BrowseRoute: BrowseRoute,
  CartRoute: CartRoute,
  ContactRoute: ContactRoute,
  FaqRoute: FaqRoute,
  PrivacyRoute: PrivacyRoute,
  ShippingRoute: ShippingRoute,
  TermsRoute: TermsRoute,
  UnauthorizedRoute: UnauthorizedRoute,
  CheckoutSuccessRoute: CheckoutSuccessRoute,
  ArtworksArtworkIdEditRoute: ArtworksArtworkIdEditRoute,
  ArtworksArtworkIdIndexRoute: ArtworksArtworkIdIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
  ApiImagesArtworkIdServerRoute: ApiImagesArtworkIdServerRoute,
  ApiWebhooksStripeServerRoute: ApiWebhooksStripeServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
